package babylon;

extern class Effect
{
	var name : Dynamic;
	var defines : String;
	var onCompiled : Effect->Void;
	var onError : Effect->String->Void;
	var onBind : Effect->Void;
	private var _engine : Dynamic/*UNKNOW_TYPE*/;
	private var _uniformsNames : Dynamic/*UNKNOW_TYPE*/;
	private var _samplers : Dynamic/*UNKNOW_TYPE*/;
	private var _isReady : Dynamic/*UNKNOW_TYPE*/;
	private var _compilationError : Dynamic/*UNKNOW_TYPE*/;
	private var _attributesNames : Dynamic/*UNKNOW_TYPE*/;
	private var _attributes : Dynamic/*UNKNOW_TYPE*/;
	private var _uniforms : Dynamic/*UNKNOW_TYPE*/;
	var _key : String;
	private var _indexParameters : Dynamic/*UNKNOW_TYPE*/;
	private var _program : Dynamic/*UNKNOW_TYPE*/;
	private var _valueCache : Dynamic/*UNKNOW_TYPE*/;
	function new(baseName:Dynamic, attributesNames:Array<String>, uniformsNames:Array<String>, samplers:Array<String>, engine:Dynamic, ?defines:String, ?fallbacks:EffectFallbacks, ?onCompiled:Effect->Void, ?onError:Effect->String->Void, ?indexParameters:Dynamic) : Void;
	function isReady() : Bool;
	function getProgram() : WebGLProgram;
	function getAttributesNames() : Array<String>;
	function getAttributeLocation(index:Float) : Float;
	function getAttributeLocationByName(name:String) : Float;
	function getAttributesCount() : Float;
	function getUniformIndex(uniformName:String) : Float;
	function getUniform(uniformName:String) : WebGLUniformLocation;
	function getSamplers() : Array<String>;
	function getCompilationError() : String;
	function getVertexShaderSource() : String;
	function getFragmentShaderSource() : String;
	function _loadVertexShader(vertex:Dynamic, callback:Dynamic->Void) : Void;
	function _loadFragmentShader(fragment:Dynamic, callback:Dynamic->Void) : Void;
	private function _dumpShadersName();
	private function _processIncludes(sourceCode, callback);
	private function _processPrecision(source);
	private function _prepareEffect(vertexSourceCode, fragmentSourceCode, attributesNames, defines, ?fallbacks);
	var isSupported : Bool;
	function _bindTexture(channel:String, texture:WebGLTexture) : Void;
	function setTexture(channel:String, texture:BaseTexture) : Void;
	function setTextureArray(channel:String, textures:Array<BaseTexture>) : Void;
	function setTextureFromPostProcess(channel:String, postProcess:PostProcess) : Void;
	function _cacheMatrix(uniformName:String, matrix:Matrix) : Bool;
	function _cacheFloat2(uniformName:String, x:Float, y:Float) : Bool;
	function _cacheFloat3(uniformName:String, x:Float, y:Float, z:Float) : Bool;
	function _cacheFloat4(uniformName:String, x:Float, y:Float, z:Float, w:Float) : Bool;
	function setIntArray(uniformName:String, array:Int32Array) : Effect;
	function setIntArray2(uniformName:String, array:Int32Array) : Effect;
	function setIntArray3(uniformName:String, array:Int32Array) : Effect;
	function setIntArray4(uniformName:String, array:Int32Array) : Effect;
	function setFloatArray(uniformName:String, array:Float32Array) : Effect;
	function setFloatArray2(uniformName:String, array:Float32Array) : Effect;
	function setFloatArray3(uniformName:String, array:Float32Array) : Effect;
	function setFloatArray4(uniformName:String, array:Float32Array) : Effect;
	function setArray(uniformName:String, array:Array<Float>) : Effect;
	function setArray2(uniformName:String, array:Array<Float>) : Effect;
	function setArray3(uniformName:String, array:Array<Float>) : Effect;
	function setArray4(uniformName:String, array:Array<Float>) : Effect;
	function setMatrices(uniformName:String, matrices:Float32Array) : Effect;
	function setMatrix(uniformName:String, matrix:Matrix) : Effect;
	function setMatrix3x3(uniformName:String, matrix:Float32Array) : Effect;
	function setMatrix2x2(uniformName:String, matrix:Float32Array) : Effect;
	function setFloat(uniformName:String, value:Float) : Effect;
	function setBool(uniformName:String, bool:Bool) : Effect;
	function setVector2(uniformName:String, vector2:Vector2) : Effect;
	function setFloat2(uniformName:String, x:Float, y:Float) : Effect;
	function setVector3(uniformName:String, vector3:Vector3) : Effect;
	function setFloat3(uniformName:String, x:Float, y:Float, z:Float) : Effect;
	function setVector4(uniformName:String, vector4:Vector4) : Effect;
	function setFloat4(uniformName:String, x:Float, y:Float, z:Float, w:Float) : Effect;
	function setColor3(uniformName:String, color3:Color3) : Effect;
	function setColor4(uniformName:String, color3:Color3, alpha:Float) : Effect;
	static var ShadersStore : {};
	static var IncludesShadersStore : {}
}