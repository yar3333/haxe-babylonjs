package babylon;

extern class Bone extends Node
{
	var name : String;
	var children : Array<Bone>;
	var animations : Array<Animation>;
	var length : Float;
	private var _skeleton : Dynamic/*UNKNOW_TYPE*/;
	var _matrix : Matrix;
	private var _restPose : Dynamic/*UNKNOW_TYPE*/;
	private var _baseMatrix : Dynamic/*UNKNOW_TYPE*/;
	private var _worldTransform : Dynamic/*UNKNOW_TYPE*/;
	private var _absoluteTransform : Dynamic/*UNKNOW_TYPE*/;
	private var _invertedAbsoluteTransform : Dynamic/*UNKNOW_TYPE*/;
	private var _parent : Dynamic/*UNKNOW_TYPE*/;
	private var _scaleMatrix : Dynamic/*UNKNOW_TYPE*/;
	private var _scaleVector : Dynamic/*UNKNOW_TYPE*/;
	private var _negateScaleChildren : Dynamic/*UNKNOW_TYPE*/;
	private var _scalingDeterminant : Dynamic/*UNKNOW_TYPE*/;
	function new(name:String, skeleton:Skeleton, parentBone:Bone, matrix:Matrix, ?restPose:Matrix) : Void;
	function getParent() : Bone;
	function getLocalMatrix() : Matrix;
	function getBaseMatrix() : Matrix;
	function getRestPose() : Matrix;
	function returnToRest() : Void;
	function getWorldMatrix() : Matrix;
	function getInvertedAbsoluteTransform() : Matrix;
	function getAbsoluteTransform() : Matrix;
	function updateMatrix(matrix:Matrix, ?updateDifferenceMatrix:Bool) : Void;
	function _updateDifferenceMatrix(?rootMatrix:Matrix) : Void;
	function markAsDirty() : Void;
	function copyAnimationRange(source:Bone, rangeName:String, frameOffset:Float, ?rescaleAsRequired:Bool, ?skelDimensionsRatio:Vector3) : Bool;
	function translate(vec:Vector3, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setPosition(position:Vector3, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setAbsolutePosition(position:Vector3, ?mesh:AbstractMesh) : Void;
	function setScale(x:Float, y:Float, z:Float, ?scaleChildren:Bool) : Void;
	function scale(x:Float, y:Float, z:Float, ?scaleChildren:Bool) : Void;
	function setYawPitchRoll(yaw:Float, pitch:Float, roll:Float, ?space:Space, ?mesh:AbstractMesh) : Void;
	function rotate(axis:Vector3, amount:Float, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setAxisAngle(axis:Vector3, angle:Float, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setRotation(rotation:Vector3, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setRotationQuaternion(quat:Quaternion, ?space:Space, ?mesh:AbstractMesh) : Void;
	function setRotationMatrix(rotMat:Matrix, ?space:Space, ?mesh:AbstractMesh) : Void;
	private function _rotateWithMatrix(rmat, ?space, ?mesh);
	private function _getNegativeRotationToRef(rotMatInv, ?space, ?mesh);
	function getScale() : Vector3;
	function getScaleToRef(result:Vector3) : Void;
	function getPosition(?space:Space, ?mesh:AbstractMesh) : Vector3;
	function getPositionToRef(space:Space, mesh:AbstractMesh, result:Vector3) : Void;
	function getAbsolutePosition(?mesh:AbstractMesh) : Vector3;
	function getAbsolutePositionToRef(mesh:AbstractMesh, result:Vector3) : Void;
	function computeAbsoluteTransforms() : Void;
	private var _syncScaleVector : Dynamic/*UNKNOW_TYPE*/;
	function getDirection(localAxis:Vector3, ?mesh:AbstractMesh) : Vector3;
	function getDirectionToRef(localAxis:Vector3, mesh:AbstractMesh, result:Vector3) : Void;
	function getRotation(?space:Space, ?mesh:AbstractMesh) : Vector3;
	function getRotationToRef(space:Space, mesh:AbstractMesh, result:Vector3) : Void;
	function getRotationQuaternion(?space:Space, ?mesh:AbstractMesh) : Quaternion;
	function getRotationQuaternionToRef(space:Space, mesh:AbstractMesh, result:Quaternion) : Void;
	function getRotationMatrix(space:Space, mesh:AbstractMesh) : Matrix;
	function getRotationMatrixToRef(space:Space, mesh:AbstractMesh, result:Matrix) : Void;
	function getAbsolutePositionFromLocal(position:Vector3, ?mesh:AbstractMesh) : Vector3;
	function getAbsolutePositionFromLocalToRef(position:Vector3, mesh:AbstractMesh, result:Vector3) : Void;
	function getLocalPositionFromAbsolute(position:Vector3, ?mesh:AbstractMesh) : Vector3;
	function getLocalPositionFromAbsoluteToRef(position:Vector3, mesh:AbstractMesh, result:Vector3) : Void;
}